/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

var DynamicFilterOperator;

(function (DynamicFilterOperator) {
  /// <summary>
  /// like
  /// </summary>
  DynamicFilterOperator["Contains"] = "Contains";
  DynamicFilterOperator["StartsWith"] = "StartsWith";
  DynamicFilterOperator["EndsWith"] = "EndsWith";
  DynamicFilterOperator["NotContains"] = "NotContains";
  DynamicFilterOperator["NotStartsWith"] = "NotStartsWith";
  DynamicFilterOperator["NotEndsWith"] = "NotEndsWith"; /// <summary>
  /// =<para></para>
  /// Equal/Equals/Eq 效果相同
  /// </summary>

  DynamicFilterOperator["Equal"] = "Equal"; /// <summary>
  /// =<para></para>
  /// Equal/Equals/Eq 效果相同
  /// </summary>

  DynamicFilterOperator["Equals"] = "Equals"; /// <summary>
  /// =<para></para>
  /// Equal/Equals/Eq 效果相同
  /// </summary>

  DynamicFilterOperator["Eq"] = "Eq"; /// <summary>
  /// &lt;&gt;
  /// </summary>

  DynamicFilterOperator["NotEqual"] = "NotEqual"; /// <summary>
  /// &gt;
  /// </summary>

  DynamicFilterOperator["GreaterThan"] = "GreaterThan"; /// <summary>
  /// &gt;=
  /// </summary>

  DynamicFilterOperator["GreaterThanOrEqual"] = "GreaterThanOrEqual"; /// <summary>
  /// &lt;
  /// </summary>

  DynamicFilterOperator["LessThan"] = "LessThan"; /// <summary>
  /// &lt;=
  /// </summary>

  DynamicFilterOperator["LessThanOrEqual"] = "LessThanOrEqual"; /// <summary>
  /// &gt;= and &lt;<para></para>
  /// 此时 Value 的值格式为逗号分割：value1,value2 或者数组
  /// </summary>

  DynamicFilterOperator["Range"] = "Range"; /// <summary>
  /// &gt;= and &lt;<para></para>
  /// 此时 Value 的值格式为逗号分割：date1,date2 或者数组<para></para>
  /// 这是专门为日期范围查询定制的操作符，它会处理 date2 + 1，比如：<para></para>
  /// 当 date2 选择的是 2020-05-30，那查询的时候是 &lt; 2020-05-31<para></para>
  /// 当 date2 选择的是 2020-05，那查询的时候是 &lt; 2020-06<para></para>
  /// 当 date2 选择的是 2020，那查询的时候是 &lt; 2021<para></para>
  /// 当 date2 选择的是 2020-05-30 12，那查询的时候是 &lt; 2020-05-30 13<para></para>
  /// 当 date2 选择的是 2020-05-30 12:30，那查询的时候是 &lt; 2020-05-30 12:31<para></para>
  /// 并且 date2 只支持以上 5 种格式 (date1 没有限制)
  /// </summary>

  DynamicFilterOperator["DateRange"] = "DateRange"; /// <summary>
  /// in (1,2,3)<para></para>
  /// 此时 Value 的值格式为逗号分割：value1,value2,value3... 或者数组
  /// </summary>

  DynamicFilterOperator["Any"] = "Any"; /// <summary>
  /// not in (1,2,3)<para></para>
  /// 此时 Value 的值格式为逗号分割：value1,value2,value3... 或者数组
  /// </summary>

  DynamicFilterOperator["NotAny"] = "NotAny"; /// <summary>
  /// 自定义解析，此时 Field 为反射信息，Value 为静态方法的参数(string)<para></para>
  /// 示范：{ Operator: "Custom", Field: "RawSql webapp1.DynamicFilterCustom,webapp1", Value: "(id,name) in ((1,'k'),(2,'m'))" }<para></para>
  /// 注意：使用者自己承担【注入风险】<para></para>
  /// 静态方法定义示范：<para></para>
  /// namespace webapp1<para></para>
  /// {<para></para>
  /// public class DynamicFilterCustom<para></para>
  /// {<para></para>
  /// [DynamicFilterCustom]<para></para>
  /// public static string RawSql(object sender, string value) => value;<para></para>
  /// }<para></para>
  /// }<para></para>
  /// </summary>
  // Custom
})(DynamicFilterOperator || (DynamicFilterOperator = {}));

var DynamicFilterLogic;

(function (DynamicFilterLogic) {
  DynamicFilterLogic["And"] = "And";
  DynamicFilterLogic["Or"] = "Or";
})(DynamicFilterLogic || (DynamicFilterLogic = {}));

var DynamicFilterInfo =
/** @class */
function () {
  function DynamicFilterInfo() {
    this.filters = [];
  }

  return DynamicFilterInfo;
}();

function convertToJSONFilter(condition) {
  var arr = condition.map(function (child) {
    var _a, _b;

    var filterItem = {
      logic: (_a = child.conjunction) !== null && _a !== void 0 ? _a : DynamicFilterLogic.And,
      filters: []
    };

    if (child.left && child.left.field && !child.children || child.children.length == 0) {
      // 如果子节点有left、op和right, 则转换为graphql形式的filter,否则返回空字符串
      if (child.left && child.op && child.right) {
        var props = {
          field: child.left.field,
          operator: child.op,
          value: child.right
        };

        switch (props.operator) {
          case 'between':
            filterItem.operator = DynamicFilterOperator.Range;
            break;

          case 'select_any_in':
            filterItem.operator = DynamicFilterOperator.Any;
            break;

          case 'select_not_any_in':
            filterItem.operator = DynamicFilterOperator.NotAny;
            break;

          default:
            {
              //@ts-ignore
              var targetKey = (_b = props.operator) === null || _b === void 0 ? void 0 : _b.replaceAll("_", "").toLowerCase();

              for (var key in DynamicFilterOperator) {
                if (targetKey == key.toLowerCase()) {
                  //@ts-ignore
                  filterItem.operator = DynamicFilterOperator[key];
                  break;
                }
              }
            }
        }

        filterItem.field = props.field;
        filterItem.value = props.value;
      }
    } else if (child.children && child.children.length > 0) {
      // 如果有子节点, 则转换为graphql形式的filter
      filterItem.filters = convertToJSONFilter(child.children);
    }

    return filterItem;
  });
  return arr;
} //@ts-ignore


function dynamicJsonFilter(condition) {
  var _a;

  var dynamicFilter = {
    filters: []
  }; // 如果有子节点, 则转换为DynamicFilter形式的filter

  if (((_a = condition === null || condition === void 0 ? void 0 : condition.children) === null || _a === void 0 ? void 0 : _a.length) > 0) {
    var children = condition.children; // 利用递归将筛选转换为graphql形式的filter字符串

    var mapResult = convertToJSONFilter(children);
    if (mapResult) if ((mapResult === null || mapResult === void 0 ? void 0 : mapResult.length) > 1) {
      //@ts-ignore
      dynamicFilter.logic = condition.conjunction;
      dynamicFilter.filters = mapResult;
    } else {
      dynamicFilter = mapResult[0];
    }
  }

  return JSON.stringify(dynamicFilter); // return "{\"field\":\"address.city\",\"operator\":\"Eq\",\"value\":[]}"
}

function genGraphqlFilter(children) {
  console.log('genGraphqlFilter children: ', children);
  var arr = children.map(function (child) {
    if (child.left && child.left.field) {
      if (child.left && child.op && child.right) {
        var filter = {
          field: child.left.field,
          operator: "",
          value: child.right
        };

        switch (child.op) {
          case 'between':
            filter.operator = "RANGE";
            break;

          case 'select_any_in':
            filter.operator = "ANY";
            break;

          case 'select_not_any_in':
            filter.operator = "NOT_ANY";
            break;

          default:
            filter.operator = child.op;
            break;
        }

        var filterStringJoin = '';

        for (var item in filter) {
          if (filterStringJoin) {
            filterStringJoin = filterStringJoin + ",";
          }

          if (item === "field" || item === "value") {
            filterStringJoin = filterStringJoin + item + ':"' + filter[item] + '"';
          } else if (item === "operator") {
            filterStringJoin = filterStringJoin + item + ':' + filter[item];
          } else {
            console.error("filter[item]: ", filter, item);
            return "{}";
          }
        }

        return "{" + filterStringJoin + "}";
      } else {
        return "{}";
      }
    } else if (child.children && child.children.length > 0) {
      var genChilds = genGraphqlFilter(child.children);

      if (genChilds === "[]") {
        return "{}";
      } else {
        return "{" + "logic:" + child.conjunction + ",filters:" + genChilds + "}";
      }
    } else {
      return "{}";
    }
  }).filter(function (item) {
    return item !== "{}";
  });
  console.log('arr: ', arr);

  if (arr.length > 0) {
    return "[" + arr.join(",") + "]";
  } else {
    return "[]";
  } //return JSON.stringify(arr);

} //@ts-ignore


window.amisExt = {
  dynamicJsonFilter: dynamicJsonFilter,
  convertCondition: function convertCondition(condition) {
    console.log(condition, "convertCondition");
    var filterString = ""; // 如果有子节点, 则转换为graphql形式的filter

    if (condition && condition.children && condition.children.length > 0) {
      var children = condition.children;
      console.log('children: ', children); // 利用递归将筛选转换为graphql形式的filter字符串

      filterString = "{" + "logic:" + condition.conjunction + "," + "filters:" + genGraphqlFilter(children) + "}";
    }

    if (filterString) {
      return filterString;
    } else {
      return "{}";
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
