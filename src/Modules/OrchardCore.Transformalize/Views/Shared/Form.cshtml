@model Transformalize.Configuration.Process
@using Microsoft.Extensions.DependencyInjection
@using TransformalizeModule.Ext
@using TransformalizeModule.Services.Contracts
@using TransformalizeModule.Models
@using Microsoft.Extensions.Primitives

@{
   Layout = null;

   const string ORCHARD_SUBMIT = "Orchard.Submit";
   const string ORCHARD_FOCUS = "Orchard.Focus";
   const string ORCHARD_METHOD = "Orchard.Method";
   const string RETURN_URL = "ReturnUrl";

   var fileService = Context.RequestServices.GetService<IFileService>();
   var focus = string.Empty;
   var submit = Model.Parameters.Any(p => p.VisiblePrompt());
   var antiForgery = Model.Mode == "form" && submit || Model.Mode != "form";

   if (Context.Request.Method == "GET") {
      focus = Model.Parameters.FirstOrDefault(p => p.VisiblePrompt())?.Name ?? string.Empty;
   } else {
      var previous = Context.Request.Form[ORCHARD_FOCUS].ToString() == ORCHARD_SUBMIT ?
         Model.Parameters.LastOrDefault(p => p.VisiblePrompt()) :
         Model.Parameters.FirstOrDefault(p => p.Name == Context.Request.Form[ORCHARD_FOCUS].ToString());

      var maxSequence = Model.Parameters.Where(p => p.VisiblePrompt()).Max(p => p.Sequence);

      if (previous != null && previous.Sequence < maxSequence) {
         var next = Model.Parameters.OrderBy(p => p.Sequence).FirstOrDefault(p => p.Sequence > previous.Sequence && p.VisiblePrompt());
         if (next != null) {
            focus = next.Name;
         } else {
            var invalid = Model.Parameters.FirstOrDefault(p => p.VisiblePrompt() && !p.Valid);
            focus = invalid == null ? ORCHARD_SUBMIT : invalid.Name;
         }
      } else {
         var invalid = Model.Parameters.FirstOrDefault(p => p.VisiblePrompt() && !p.Valid);
         focus = invalid == null ? ORCHARD_SUBMIT : invalid.Name;
      }
   }
}

@if (!Model.Parameters.Any()) {
   <p class="text-muted">No parameters are defined for this task.</p>
}

<style>
   span.fas {
      padding-top: 10px;
   }
</style>

<form id="id_form" method="post" role="form" enctype="multipart/form-data" asp-antiforgery="@antiForgery">

   <input type="hidden" id="id_focus" name="@ORCHARD_FOCUS" value="@(focus)" />
   <input type="hidden" id="id_method" name="@ORCHARD_METHOD" value="@Context.Request.Method" />

   @if (!Model.Parameters.Any(p => p.Name == RETURN_URL)) {
      if (Context.Request.HasFormContentType && Context.Request.Form[RETURN_URL] != StringValues.Empty) {
         <input type="hidden" name="@RETURN_URL" value="@Context.Request.Form[RETURN_URL].ToString()" />
      } else if (Context.Request.Query[RETURN_URL] != StringValues.Empty) {
         <input type="hidden" name="@RETURN_URL" value="@Context.Request.Query[RETURN_URL].ToString()" />
      }
   }

   @foreach (var parameter in Model.Parameters) {

      var value = parameter.Value ?? string.Empty as object;

      if (Context.Request.Method == "GET") {
         parameter.Valid = true;
         parameter.Message = string.Empty;
      }

      if (TransformalizeModule.Common.SystemFields.Contains(parameter.Name)) {
         <input type="hidden" name="@parameter.Name" value="@parameter.Value" />
         continue;
      }

      if (parameter.Readonly()) {

         if (!parameter.Raw && !parameter.Input || parameter.PrimaryKey || parameter.InputType == "location" || parameter.Visible == "false") {
            <input type="hidden" name="@parameter.Name" value="@parameter.Value" id="id_@parameter.Name" />
            Html.RenderPartial("Location", parameter);
            continue;
         }

         <div class="form-group @(parameter.Valid ? "is-valid" : "is-invalid") @parameter.Class">
            @if (parameter.Raw) {
               @Html.Raw(value)
            } else {

               <label for="@parameter.Name" class="form-label">@(parameter.Label == string.Empty ? parameter.Name : parameter.Label)</label>
               @if (parameter.Hint != string.Empty) {
                  <span class="text-muted float-end"> @parameter.Hint</span>
               }

               <input type="text"
                      readonly="readonly"
                      class="form-control @(parameter.Valid ? "is-valid" : "is-invalid")"
                      name="@parameter.Name"
                      id="id_@parameter.Name"
                      placeholder="@parameter.Label"
                      value="@value"
                      autocomplete="@(parameter.AutoComplete ? "on" : "off")"
                      data-tfl-post-back="false" />

               @* if you change location you must update parsley error container *@
               <span class="help-container">
                  @if (!parameter.Valid) {
                     <span class="help-block">@(parameter.Message.Replace('|', ' '))</span>
                  }
               </span>
            }
         </div>
         continue;
      }

      var map = Model.Maps.FirstOrDefault(m => m.Name == parameter.Map);
      if (map != null) {

         <div class="form-group @(parameter.Valid ? "is-valid" : "is-invalid") @parameter.Class">
            <label for="@parameter.Name" class="form-label">@parameter.Label</label>
            @if (parameter.Hint != string.Empty) {
               <span class="text-muted float-end"> @parameter.Hint</span>
            }
            @if (map.Items.Any() && map.Items.All(i => !i.To.Equals(value))) {
               value = map.Items.First().To;
            }
            @if (map.Items.Count > 3) {
               <select class="form-control @(parameter.Valid ? "is-valid" : "is-invalid")"
                       style="background-image:none;"
                       name="@parameter.Name"
                       id="id_@parameter.Name"
                       data-tfl-post-back="@parameter.PostBack">
                  @foreach (var item in map.Items) {
                     <option value="@item.To" selected="@(value.Equals(item.To))">@item.From</option>
                  }
               </select>
            } else {
               <br />
               foreach (var item in map.Items) {
                  <div class="form-check form-check-inline">
                     <input type="radio" name="@parameter.Name" class="form-check-input" value="@item.To" checked="@(value.Equals(item.To))" data-tfl-post-back="@(parameter.PostBack)" />
                     <label for="@parameter.Name" class="form-check-label form-label">@item.From</label>
                  </div>
               }
            }
            @* if you change markup location you must update parsley error container *@
            <span class="help-container">
               @if (!parameter.Valid) {
                  <span class="help-block">@(parameter.Message.Replace('|', ' '))</span>
               }
            </span>
         </div>

      } else {
         var type = parameter.InputType == "defer" ? parameter.Type : parameter.InputType;
         switch (type) {
            case "bool":
            case "boolean":
               value = Transformalize.Constants.ObjectConversionMap["bool"](value.Equals(string.Empty) ? "false" : value);
               <div class="@(parameter.Valid ? "is-valid" : "is-invalid") @parameter.Class">
                  <div class="checkbox">
                     <label for="@parameter.Name" class="form-label">
                        <input name="@parameter.Name"
                               id="id_@parameter.Name"
                               class="@(parameter.Valid ? "is-valid" : "is-invalid")"
                               type="checkbox"
                               checked="@((bool)value)"
                               data-tfl-post-back="@(parameter.PostBack)" /> @parameter.Label
                     </label>
                  </div>
                  @* if you change markup location you must update parsley error container *@
                  <span class="help-container">
                     @if (!parameter.Valid) {
                        <span class="help-block">@(parameter.Message.Replace('|', ' '))</span>
                     }
                  </span>
               </div>
               break;
            case "date":
               <div class="form-group @(parameter.Valid ? "is-valid" : "is-invalid") @parameter.Class">
                  <label for="@parameter.Name" class="form-label">@parameter.Label</label>
                  @if (parameter.Hint != string.Empty) {
                     <span class="text-muted float-end"> @parameter.Hint</span>
                  }
                  <div class="input-group">
                     <span class="input-group-text fas fa-calendar" id="id_dp_@parameter.Name" style="cursor: pointer;"></span>
                     <input type="text"
                              class="form-control @(parameter.Valid ? "is-valid" : "is-invalid")"
                              maxlength="@parameter.Length"
                              name="@parameter.Name"
                              id="id_@parameter.Name"
                              placeholder="@parameter.Label"
                              value="@value"
                              autocomplete="@(parameter.AutoComplete ? "on" : "off")"
                              data-tfl-post-back="@(parameter.PostBack)"
                              @Html.Raw(parameter.ToParsley()) />
                     <script language="javascript">
                     $(document).ready(function () {
                        var $input = $('#id_@parameter.Name').pickadate({ editable: true, format: 'yyyy-mm-dd' });
                        var picker = $input.pickadate('picker');
                        picker.off('open');
                        $('#id_dp_@parameter.Name').click(function (e) {
                              // stop the click from bubbling
                              e.stopPropagation();
                              // prevent the default click action
                              e.preventDefault();
                              // open the date picker
                              if (picker.get('open')) {
                                 picker.close()
                              } else {
                                 picker.open()
                              }
                        });
                     });
                     </script>
                  </div>
                  @* if you change markup location you must update parsley error container *@
                  <span class="help-container">
                     @if (!parameter.Valid) {
                        <span class="help-block">@(parameter.Message.Replace('|', ' '))</span>
                     }
                  </span>

               </div>
               break;
            case "time":
               <div class="form-group @(parameter.Valid ? "is-valid" : "is-invalid") @parameter.Class">
                  <label for="@parameter.Name" class="form-label">@parameter.Label</label>
                  @if (parameter.Hint != string.Empty) {
                     <span class="text-muted float-end"> @parameter.Hint</span>
                  }
                  <div class="input-group">
                     <span class="input-group-text fas fa-clock" id="id_dp_@parameter.Name" style="cursor: pointer;"></span>
                     <input type="time"
                              class="form-control @(parameter.Valid ? "is-valid" : "is-invalid")"
                              maxlength="@parameter.Length"
                              name="@parameter.Name"
                              id="id_@parameter.Name"
                              placeholder="@parameter.Label"
                              value="@value"
                              data-tfl-post-back="@(parameter.PostBack)"
                              @Html.Raw(parameter.ToParsley()) />
                     <script language="javascript">
                        $(document).ready(function () {
                           // plugin code goes here
                        });
                     </script>
                  </div>
                  @* if you change markup location you must update parsley error container *@
                  <span class="help-container">
                     @if (!parameter.Valid) {
                        <span class="help-block">@(parameter.Message.Replace('|', ' '))</span>
                     }
                  </span>

               </div>
               break;
            case "file":

               TransformalizeFilePart file = null;
               string oldFileId = string.Empty;

               if (Context.Request.HasFormContentType) {
                  oldFileId = Context.Request.Form[parameter.Name + "_Old"].ToString();
               }

               if (!string.IsNullOrWhiteSpace(oldFileId)) {
                  file = await fileService.GetFilePart(oldFileId);
               } else {
                  if (value is string strValue) {
                     file = await fileService.GetFilePart(strValue);
                  }
               }

               @* if change this markup you'll need to update filehandler jquery selectors *@
               <div class="form-group @(parameter.Valid ? "is-valid" : "is-invalid") @parameter.Class">

                  <label for="@parameter.Name" class="form-label">@parameter.Label</label>
                  @if (parameter.Hint != string.Empty) {
                     <span class="text-muted float-end"> @parameter.Hint</span>
                  }

                  <div id="id_@(parameter.Name)" class="file-options">
                     <div class="has-file" style="@(file == null ? "display:none" : string.Empty)">
                        <div class="input-group">
                           <span class="input-group-text fas fa-times removeButton" style="cursor: pointer;"></span>
                           <input type="text"
                                    class="form-control @(parameter.Valid ? "is-valid" : "is-invalid")"
                                    name="@parameter.Name"
                                    @*id="id_@parameter.Name"*@
                                    disabled="@(file == null)"
                                    autocomplete="@(parameter.AutoComplete ? "on" : "off")"
                                    data-tfl-post-back="@(parameter.PostBack)"
                                    value="@(file == null ? string.Empty : file.OriginalName.Text)"
                                    readonly="readonly" />
                        </div>
                     </div>
                     <div class="expecting-file" style="@(file == null ? string.Empty: "display:none")">
                        <table>
                           <tr>
                              <td style="width:auto;">

                                 <label class="btn btn-primary btn-file form-label" style="width:110px; margin-bottom:0px;">
                                    <i class="fas fa-plus"></i>
                                    Upload <input name="@(parameter.Name)"
                                                   type="file"
                                                   style="display: none;"
                                                   class="form-control custom-file-input @(parameter.Valid ? "is-valid" : "is-invalid")"
                                                   data-tfl-post-back="false"
                                                   disabled="@(file != null)"
                                                   @(Html.Raw(parameter.InputAccept == string.Empty ? string.Empty : "accept=\"" + parameter.InputAccept + "\""))
                                                   @(Html.Raw(parameter.InputCapture == string.Empty ? string.Empty : "capture=\"" + parameter.InputCapture + "\"")) />
                                 </label>

                              </td>
                              <td style="width:100%;">
                                 <div class="progress" style="height:38px;">
                                    <div class="progress-bar progress-bar-striped progress-bar-success" style="height:38px;"></div>
                                 </div>
                              </td>
                           </tr>

                        </table>
                     </div>
                  </div>


                  <span class="help-container">
                     @if (!parameter.Valid) {
                        <span class="help-block">@(parameter.Message.Replace('|', ' '))</span>
                     }
                  </span>
                  <input type="hidden"
                           name="@(parameter.Name)_Old"
                           id="id_@(parameter.Name)_Old"
                           value="@(string.IsNullOrEmpty(oldFileId) ? (file == null ? string.Empty : file.ContentItem.ContentItemId) : oldFileId)"
                           @Html.Raw(parameter.ToParsley()) />
                  <script language="javascript">$(document).ready(function () { fileHandler('@parameter.Name',false); });</script>
               </div>

               break;
            case "scan":

               var hasScan = value != null && value.ToString() != string.Empty;

               @* if change this markup you'll need to update filehandler jquery selectors *@
               <div class="form-group @(parameter.Valid ? "is-valid" : "is-invalid") @parameter.Class">

                  <label for="@parameter.Name" class="form-label">@parameter.Label</label>
                  @if (parameter.Hint != string.Empty) {
                     <span class="text-muted float-end"> @parameter.Hint</span>
                  }
                  <div id="id_@(parameter.Name)" class="file-options">
                     <div class="has-file" style="@(hasScan ? string.Empty : "display:none")">
                        <div class="input-group">
                           <span class="input-group-text fas fa-times removeButton" style="cursor: pointer;"></span>
                           <input type="text"
                                    class="form-control @(parameter.Valid ? "is-valid" : "is-invalid")"
                                    name="@parameter.Name"
                                    id="id_@parameter.Name"
                                    autocomplete="@(parameter.AutoComplete ? "on" : "off")"
                                    data-tfl-post-back="false"
                                    value="@(hasScan ? value : string.Empty)"
                                    @Html.Raw(parameter.ToParsley()) />
                        </div>
                     </div>
                     <div class="expecting-file" style="@(hasScan ? "display:none" : string.Empty)">
                        <table>
                           <tr>
                              <td style="width:auto;">
                                 <span class="btn btn-warning btn-sm fileinput-button">
                                    <i class="input-group-text fas fa-barcode"></i>
                                    <span> Scan </span>
                                    <input name="@(parameter.Name)"
                                             type="file"
                                             class="form-control @(parameter.Valid ? "is-valid" : "is-invalid")"
                                             data-tfl-post-back="false"
                                             disabled="@(hasScan)"
                                             accept="image/*"
                                             @(Html.Raw(parameter.InputCapture == string.Empty ? string.Empty : "capture=\"" + parameter.InputCapture + "\"")) />
                                 </span>
                              </td>
                              <td style="width:100%;">
                                 <div class="progress">
                                    <div class="progress-bar progress-bar-striped progress-bar-success"></div>
                                 </div>
                              </td>
                           </tr>
                        </table>
                     </div>
                  </div>

                  <span class="help-container">
                     @if (!parameter.Valid) {
                        <span class="help-block">@(parameter.Message.Replace('|', ' '))</span>
                     }
                  </span>
                  <script language="javascript">$(document).ready(function () { fileHandler('@parameter.Name',true); });</script>
               </div>

               break;

            default:
               int length;
               <div class="form-group @(parameter.Valid ? "is-valid" : "is-invalid") @parameter.Class">
                  <label for="@parameter.Name" class="form-label">@parameter.Label</label>
                  @if (parameter.Hint != string.Empty) {
                     <span class="text-muted float-end"> @parameter.Hint</span>
                  }
                  @if (parameter.UseTextArea(out length)) {
                     <textarea class="form-control @(parameter.Valid ? "is-valid" : "is-invalid")"
                                 name="@parameter.Name"
                                 id="id_@parameter.Name"
                                 rows="3"
                                 placeholder="@parameter.Label"
                                 maxlength="@length"
                                 data-tfl-post-back="@(parameter.PostBack)"
                                 @Html.Raw(parameter.ToParsley())>@value.ToString().Trim()</textarea>
                  } else {
                     @switch (type) {
                        case "number":
                           <input type="number"
                                    class="form-control @(parameter.Valid ? "is-valid" : "is-invalid")"
                                    maxlength="@parameter.Length"
                                    name="@parameter.Name"
                                    id="id_@parameter.Name"
                                    placeholder="@parameter.Label"
                                    value="@value"
                                    data-tfl-post-back="@(parameter.PostBack)"
                                    @(Html.Raw(parameter.IsDecimalType() ? string.Format("step=\"{0}\"", ".".PadRight(parameter.Scale - 1, '0') + "1") : string.Empty))
                                    @Html.Raw(parameter.ToParsley()) />
                           break;
                        default:
                           <input type="text"
                                    class="form-control @(parameter.Valid ? "is-valid" : "is-invalid")"
                                    maxlength="@parameter.Length"
                                    name="@parameter.Name"
                                    id="id_@parameter.Name"
                                    placeholder="@parameter.Label"
                                    autocomplete="@(parameter.AutoComplete ? "on" : "off")"
                                    value="@value"
                                    data-tfl-post-back="@(parameter.PostBack)"
                                    @Html.Raw(parameter.ToParsley()) />
                           break;
                     }

                  }
                  @* if you change location you must update parsley error container *@
                  <span class="help-container">
                     @if (!parameter.Valid) {
                        <span class="help-block">@(parameter.Message.Replace('|', ' '))</span>
                     }
                  </span>

               </div>
               break;
               }
            }
         }

   @if (Model.Mode == "form") {

      if (submit) {
         <input name="@ORCHARD_SUBMIT" id="id_submit" type="submit" value="Submit" class="btn btn-success btn-block" />
      }

   } else {  // tasks

      if (Model.Parameters.All(p => p.Valid)) {
         <input name="@ORCHARD_SUBMIT" id="id_submit" type="submit" value="Run" class="btn btn-success btn-block" />
      } else {
         <input name="@ORCHARD_SUBMIT" id="id_submit" type="submit" value="Update" class="btn btn-primary btn-block" />
      }

   }

</form>











