@using Transformalize.Configuration
@using Transformalize.Contracts
@using Microsoft.Extensions.DependencyInjection
@using TransformalizeModule.Services.Contracts
@using TransformalizeModule
@using TransformalizeModule.Ext 

@model ReportViewModel

@{
   RenderTitleSegments(Model.Title, "before");

   var entity = Model.Process.Entities.FirstOrDefault() ?? new Entity { Name = "Missing Entity" };
   var allFields = entity.GetAllFields().Where(f => !f.System).ToArray();

   var linkService = Context.RequestServices.GetService<ILinkService>();
   var hasActions = Model.Process.Actions.Any(a => !a.Before && !a.After && !string.IsNullOrEmpty(a.Description) && !a.Description.StartsWith("Batch", StringComparison.OrdinalIgnoreCase));
   var firstEntity = Model.Process.Entities.First();
   var sortService = Context.RequestServices.GetService<ISortService>();

   if (hasActions) {
      var bv = allFields.FirstOrDefault(f => f.Alias == Model.Part.BulkActionValueField.Text);
      if (bv == null) {
         hasActions = false;
      } else {
         bv.Output = false;
      }
   }

   var fieldHash = new HashSet<string>(allFields.Select(f => f.Alias), StringComparer.OrdinalIgnoreCase);
   var colorIsField = fieldHash.Contains(Model.Part.MapColorField.Text);
   var radiusIsField = fieldHash.Contains(Model.Part.MapRadiusField.Text);
   var opacityIsField = fieldHash.Contains(Model.Part.MapOpacityField.Text);
}

<script asp-name="jQuery" at="Head"></script>
<script asp-name="jQuery-ui" at="Foot"></script>
<script asp-name="bootstrap-select-beta" version="1.14.0" at="Foot"></script>
<script asp-name="block-ui" version="2.70.0" at="Foot"></script>
<script asp-name="mapbox-gl" version="1.11.0" at="Head"></script>
@if (hasActions) { 
   <script asp-name="mapbox-gl-draw" version="1.1.2" at="Foot"></script>
}
<script asp-name="turf" version="5.1.6" at="Foot"></script>

@foreach (var script in Model.Process.Scripts.Where(s => s.Global && !string.IsNullOrEmpty(s.File) && (s.Language == "js" || s.Language == Transformalize.Constants.DefaultSetting && s.File.EndsWith(".js", StringComparison.OrdinalIgnoreCase)))) {
   <script at="Foot" src="@script.File"></script>
}

<style asp-name="jQuery-ui"></style>
<style asp-name="bootstrap-select-beta" version="1.14.0"></style>
<style asp-name="mapbox-gl" version="1.11.0"></style>
@if (hasActions) { 
   <style asp-name="mapbox-gl-draw" version="1.1.2"></style>
}

@foreach (var script in Model.Process.Scripts.Where(s => s.Global && !string.IsNullOrEmpty(s.File) && (s.Language == "css" || s.Language == Transformalize.Constants.DefaultSetting && s.File.EndsWith(".css", StringComparison.OrdinalIgnoreCase)))) {
   <style src="@script.File"></style>
}

<style>

   main.container {
      max-width: 98%;
   }

    .btn-xs, .btn-group-xs > .btn {
        border-radius: 3px;
        font-size: 9px;
        line-height: 1.5;
    }

    #busy {
        position: fixed;
        left: 46%;
        top: 40%;
        display: none;
        background: transparent url(@Url.Content($"~/{Common.ModuleName}/Styles/busy.gif"));
        background-size: 149px 149px;
        background-repeat:no-repeat;
        z-index: 1020;
        height: 150px;
        width: 150px;
    }

    #busy-holder {
        background: transparent;
        width: 100%;
        height: 100%;
    }

    .mapboxgl-popup {
        max-width: 400px;
    }

    .mapboxgl-popup-content {
        font-family: 'Open Sans', sans-serif;
        padding-top: 18px;
    }

    .mapboxgl-popup-content .table {
        margin-bottom: 0px;
    }

    .mapboxgl-popup-content .table-condensed > thead > tr > td, .mapboxgl-popup-content .table-condensed > tbody > tr > td, .mapboxgl-popup-content .table-condensed > tfoot > tr > td {
        padding: 1px;
    }

   @foreach (var script in Model.Process.Scripts.Where(s => s.Global && s.Language == "css" && string.IsNullOrEmpty(s.File))) {
      <text>/* @script.Name css script */</text>
      @Html.Raw(script.Content)
   }
</style>

<script type="text/javascript">
   //<!--
   var server = {
      entity: {
         page: @firstEntity.Page
      },
      bulkActionUrl: '@(Url.Action("Create", "BulkAction", new { ContentItemId = Model.Item.ContentItemId }))',
      hasActions: @(hasActions.ToString().ToLower())
   };
   //-->
</script>

@foreach (var logEntry in Model.Process.Log.Where(le => le.LogLevel == LogLevel.Error)) {
   <div class="alert alert-danger" role="alert">@logEntry.Message</div>
}

@foreach (var logEntry in Model.Process.Log.Where(le => le.LogLevel == LogLevel.Warn)) {
   <div class="alert alert-warning" role="alert">@logEntry.Message</div>
}

<form id="id_report" class="form-inline" role="form" method="GET">

   <input id="id_sort" class="bsh" type="hidden" name="sort" value="@(Context.Request.Query["sort"].ToString() ?? string.Empty)" />
   <input id="id_page" class="bsh" type="hidden" name="page" value="@firstEntity.Page" />
   <input id="id_size" class="bsh" type="hidden" name="size" value="@(firstEntity.Size)" />

   @foreach (var parameter in Model.Process.Parameters.Where(p => !p.Prompt && Context.Request.Query[p.Name].ToString() != null).Select(p => p.Name)) {
      <input type="hidden" name="@parameter" value="@(Context.Request.Query[parameter].ToString())" />
   }

   <div class="container-fluid">

      @Html.Partial("Parameters", Model)

      @Html.Partial("Controls", Model)

      <div id="id_map_alert" style="display: none;" class="alert alert-info" role="alert"><span class="glyphicon glyphicon-info-sign"> </span></div>

      <div id="id_map" data-tap-disabled="true" style="height: 655px; width: 100%; padding-top: 2px;"></div>
      <script>
      //<!--
      mapboxgl.accessToken = '@Model.Settings.MapBoxToken';
      var url = '@(linkService.Create(Model.Item.ContentItemId, Url.Action("Stream", "Map", new { ContentItemId = Model.IdOrAlias }), !Model.Part.PageSizesExtended.Enabled()))';

      $(document).ready(function() {

         $('#id_map').height(Math.round($(window).height() * .71));

         var map = new mapboxgl.Map({
            container: 'id_map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [-86.4945838, 42.1136639],
            zoom: 6
         });

         function addDataLayer(layerId, fitBounds) {
            // using layerId as layer id and data source name
            map.addSource(layerId, { type: "geojson", data: window.data });

            map.addLayer({
               id: layerId,
               type: "circle",
               source: layerId,
               paint: {
                  "circle-color": @if (colorIsField) {
                     <text>{ "type": "identity", "property": "@Model.Part.MapColorField.Text" }</text>
                  } else {
                     <text>"@Model.Part.MapColorField.Text"</text>
                  },
                  "circle-radius": @if (radiusIsField) {
                     <text>{ "type": "identity", "property": "@Model.Part.MapRadiusField.Text" }</text>
                  } else {
                     <text>@Model.Part.MapRadiusField.Text</text>
                  },
                  "circle-opacity": @if(opacityIsField) {
                     <text>{ "type": "identity", "property": "@Model.Part.MapOpacityField.Text" }</text>
                  } else {
                     <text>@Model.Part.MapOpacityField.Text</text>
                  },
                  "circle-stroke-width": 1,
                  "circle-stroke-color": '#000000',
                  "circle-stroke-opacity": 0.9
               }
            });

            console.log('fitting bounds');
            if (fitBounds) {
               if (window.data.features.length > 0) {
                  var bounds = new mapboxgl.LngLatBounds();
                  window.data.features.forEach(function(feature) {
                     bounds.extend(feature.geometry.coordinates);
                  });
                  map.fitBounds(bounds, { padding: 100 });
               }
            }

            console.log('setting up popups');
            map.on('click', layerId, function (e) {
               var coordinates = e.features[0].geometry.coordinates.slice();
               while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                  coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
               }
               new mapboxgl.Popup().setLngLat(coordinates).setHTML(e.features[0].properties.description).addTo(map);
            });

            map.on('mouseenter', layerId, function () {
               map.getCanvas().style.cursor = 'pointer';
            });
            map.on('mouseleave', layerId, function () {
               map.getCanvas().style.cursor = '';
            });

         }

         // map style switcher
         /*
            var layerList = document.getElementById('mapStyles');
            var inputs = layerList.getElementsByTagName('a');

         function switchLayer(layer) {
            console.log('switching style to ' + layer.target.id);
               map.setStyle(layer.target.id);
            }

            for (var i = 0; i < inputs.length; i++) {
               inputs[i].onclick = switchLayer;
            }

            map.on('style.load', function () {
               // Triggered when `setStyle` is called.
               if (window.data) {
                  addDataLayer("circle-layer", false);
               }
            });
            */

         var loadData = function (fitBounds) {
            $('#busy').show();
            url = url + (url.indexOf('?') > -1 ? '&' : '?') + 'random=' + Math.random();
            $.getJSON(url, function (data) {

               // filter out zeroes
               var zeroes = 0;
               data.features = data.features.filter(function (f) {
                  if (f.geometry.coordinates[0] === 0.0 && f.geometry.coordinates[1] === 0.0) {
                     zeroes++;
                     return false;
                  } else {
                     return true;
                  }
               });

               if (zeroes > 0) {
                  $('#id_map_alert').text(zeroes + ' record(s) are missing coordinates.  They are not displayed on the map below.').show();
               } else {
                  $('#id_map_alert').hide();
               }

               window.data = data;
               addDataLayer("circle-layer", fitBounds);

               $('#busy').hide();
            });
         };

         var refreshButton = document.getElementById('mapRefresh');
         if (refreshButton) {
            refreshButton.onclick = function () {
               map.removeLayer("circle-layer");
               map.removeSource("circle-layer");
               loadData(false);
            }
         }

         map.on('load', function () {

            map.addControl(new mapboxgl.FullscreenControl());
            map.addControl(new mapboxgl.NavigationControl());
            map.addControl(new mapboxgl.GeolocateControl({ positionOptions: { enableHighAccuracy: true }, trackUserLocation: true }));

            if (server.hasActions) {

               var draw = new MapboxDraw({ displayControlsDefault: false, controls: { polygon: true, trash: true } });

               map.addControl(draw);

               function updateArea(e) {

                  var shape = draw.getAll();
                  $('input.bulk-action').remove();

                  if (shape.features.length > 0) {
                     var selected = turf.pointsWithinPolygon(window.data, shape);

                     selected.features.forEach(function (feature) {
                        $("<input>").attr({
                           type: "checkbox",
                           checked: "checked",
                           "class": "bulk-action",
                           style: "visibility: hidden",
                           name: "Records",
                           value: feature.properties["batch-value"]
                        }).appendTo("#id_report");
                     });

                     // update the little badges
                     $(".bulk-action-link").each(function () {
                        var link = $(this);
                        $("input[name=bulk-action-length]").val(selected.features.length);
                        controls.bulkActionLength = selected.features.length;
                        link.html(link.attr('rel') + ' <span class="badge badge-pill badge-dark">' + selected.features.length + "</span>");
                     });
                  } else {
                     // update the little badges
                     $(".bulk-action-link").each(function () {
                        var link = $(this);
                        $("input[name=bulk-action-length]").val(0);
                        controls.bulkActionLength = 0;
                        link.html(link.attr('rel') + ' <span class="badge badge-pill badge-dark"></span>');
                     });
                  }
               }

               map.on('draw.create', updateArea);
               map.on('draw.delete', updateArea);
               map.on('draw.update', updateArea);

            }

            @foreach (var script in Model.Process.Scripts.Where(s => s.Global && string.IsNullOrEmpty(s.File) && s.Language == "js")) {
            <text>/* @script.Name */</text>
            @(Html.Raw(script.Content))

            }

            loadData(true);
         });
      });
      //-->
      </script>

   </div>

</form>

<span class="AntiForge">@Html.AntiForgeryToken()</span>

<div id="busy_holder">
   <div id="busy"></div>
</div>

<script asp-src="~/@Common.ModuleName/Scripts/report.js"></script>
